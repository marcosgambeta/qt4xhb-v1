//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QLocalSocketSlots.hpp"

QLocalSocketSlots::QLocalSocketSlots(QObject *parent) : QObject(parent)
{
}

QLocalSocketSlots::~QLocalSocketSlots()
{
}

void QLocalSocketSlots::connected()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "connected()");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QLOCALSOCKET");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QLocalSocketSlots::disconnected()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "disconnected()");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QLOCALSOCKET");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QLocalSocketSlots::error(QLocalSocket::LocalSocketError socketError)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "error(QLocalSocket::LocalSocketError)");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QLOCALSOCKET");
    PHB_ITEM pSocketError = hb_itemPutNI(NULL, static_cast<int>(socketError));

    hb_vmEvalBlockV(cb, 2, pSender, pSocketError);

    hb_itemRelease(pSender);
    hb_itemRelease(pSocketError);
  }
}

void QLocalSocketSlots::stateChanged(QLocalSocket::LocalSocketState socketState)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "stateChanged(QLocalSocket::LocalSocketState)");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QLOCALSOCKET");
    PHB_ITEM pSocketState = hb_itemPutNI(NULL, static_cast<int>(socketState));

    hb_vmEvalBlockV(cb, 2, pSender, pSocketState);

    hb_itemRelease(pSender);
    hb_itemRelease(pSocketState);
  }
}

void QLocalSocketSlots_connect_signal(const QString &signal, const QString &slot)
{
  QLocalSocket *obj = qobject_cast<QLocalSocket *>(Qt4xHb::getQObjectPointerFromSelfItem());

  if (obj != NULL) {
    QLocalSocketSlots *s = QCoreApplication::instance()->findChild<QLocalSocketSlots *>();

    if (s == NULL) {
      s = new QLocalSocketSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt4xHb::Signals_connection_disconnection(s, signal, slot));
  } else {
    hb_retl(false);
  }
}
