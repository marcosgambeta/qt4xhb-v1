//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QTimeLineSlots.hpp"

QTimeLineSlots::QTimeLineSlots(QObject *parent) : QObject(parent)
{
}

QTimeLineSlots::~QTimeLineSlots()
{
}

void QTimeLineSlots::finished()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "finished()");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTIMELINE");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QTimeLineSlots::frameChanged(int frame)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "frameChanged(int)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTIMELINE");
    PHB_ITEM pFrame = hb_itemPutNI(NULL, frame);

    hb_vmEvalBlockV(cb, 2, pSender, pFrame);

    hb_itemRelease(pSender);
    hb_itemRelease(pFrame);
  }
}

void QTimeLineSlots::stateChanged(QTimeLine::State newState)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "stateChanged(QTimeLine::State)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTIMELINE");
    PHB_ITEM pNewState = hb_itemPutNI(NULL, static_cast<int>(newState));

    hb_vmEvalBlockV(cb, 2, pSender, pNewState);

    hb_itemRelease(pSender);
    hb_itemRelease(pNewState);
  }
}

void QTimeLineSlots::valueChanged(qreal value)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "valueChanged(qreal)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTIMELINE");
    PHB_ITEM pValue = hb_itemPutND(NULL, value);

    hb_vmEvalBlockV(cb, 2, pSender, pValue);

    hb_itemRelease(pSender);
    hb_itemRelease(pValue);
  }
}

void QTimeLineSlots_connect_signal(const QString &signal, const QString &slot)
{
  QTimeLine *obj = qobject_cast<QTimeLine *>(Qt4xHb::getQObjectPointerFromSelfItem());

  if (obj != NULL)
  {
    QTimeLineSlots *s = QCoreApplication::instance()->findChild<QTimeLineSlots *>();

    if (s == NULL)
    {
      s = new QTimeLineSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt4xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
}
