//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QSignalMapperSlots.hpp"

QSignalMapperSlots::QSignalMapperSlots(QObject *parent) : QObject(parent)
{
}

QSignalMapperSlots::~QSignalMapperSlots()
{
}

void QSignalMapperSlots::mapped(int i)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "mapped(int)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QSIGNALMAPPER");
    PHB_ITEM pI = hb_itemPutNI(NULL, i);

    hb_vmEvalBlockV(cb, 2, pSender, pI);

    hb_itemRelease(pSender);
    hb_itemRelease(pI);
  }
}

void QSignalMapperSlots::mapped(const QString &s)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "mapped(QString)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QSIGNALMAPPER");
    PHB_ITEM pS = hb_itemPutC(NULL, QSTRINGTOSTRING(s));

    hb_vmEvalBlockV(cb, 2, pSender, pS);

    hb_itemRelease(pSender);
    hb_itemRelease(pS);
  }
}

void QSignalMapperSlots::mapped(QWidget *w)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "mapped(QWidget*)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QSIGNALMAPPER");
    PHB_ITEM pW = Qt4xHb::Signals_return_qobject(w, "QWIDGET");

    hb_vmEvalBlockV(cb, 2, pSender, pW);

    hb_itemRelease(pSender);
    hb_itemRelease(pW);
  }
}

void QSignalMapperSlots::mapped(QObject *o)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "mapped(QObject*)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QSIGNALMAPPER");
    PHB_ITEM pO = Qt4xHb::Signals_return_qobject(o, "QOBJECT");

    hb_vmEvalBlockV(cb, 2, pSender, pO);

    hb_itemRelease(pSender);
    hb_itemRelease(pO);
  }
}

void QSignalMapperSlots_connect_signal(const QString &signal, const QString &slot)
{
  QSignalMapper *obj = qobject_cast<QSignalMapper *>(Qt4xHb::getQObjectPointerFromSelfItem());

  if (obj != NULL)
  {
    QSignalMapperSlots *s = QCoreApplication::instance()->findChild<QSignalMapperSlots *>();

    if (s == NULL)
    {
      s = new QSignalMapperSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt4xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
}
