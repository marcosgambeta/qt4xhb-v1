//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QProcessSlots.hpp"

QProcessSlots::QProcessSlots(QObject *parent) : QObject(parent)
{
}

QProcessSlots::~QProcessSlots()
{
}

void QProcessSlots::error(QProcess::ProcessError error)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "error(QProcess::ProcessError)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QPROCESS");
    PHB_ITEM pError = hb_itemPutNI(NULL, static_cast<int>(error));

    hb_vmEvalBlockV(cb, 2, pSender, pError);

    hb_itemRelease(pSender);
    hb_itemRelease(pError);
  }
}

void QProcessSlots::finished(int exitCode, QProcess::ExitStatus exitStatus)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "finished(int,QProcess::ExitStatus)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QPROCESS");
    PHB_ITEM pExitCode = hb_itemPutNI(NULL, exitCode);
    PHB_ITEM pExitStatus = hb_itemPutNI(NULL, static_cast<int>(exitStatus));

    hb_vmEvalBlockV(cb, 3, pSender, pExitCode, pExitStatus);

    hb_itemRelease(pSender);
    hb_itemRelease(pExitCode);
    hb_itemRelease(pExitStatus);
  }
}

void QProcessSlots::readyReadStandardError()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "readyReadStandardError()");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QPROCESS");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QProcessSlots::readyReadStandardOutput()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "readyReadStandardOutput()");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QPROCESS");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QProcessSlots::started()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "started()");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QPROCESS");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QProcessSlots::stateChanged(QProcess::ProcessState newState)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "stateChanged(QProcess::ProcessState)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QPROCESS");
    PHB_ITEM pNewState = hb_itemPutNI(NULL, static_cast<int>(newState));

    hb_vmEvalBlockV(cb, 2, pSender, pNewState);

    hb_itemRelease(pSender);
    hb_itemRelease(pNewState);
  }
}

void QProcessSlots_connect_signal(const QString &signal, const QString &slot)
{
  QProcess *obj = qobject_cast<QProcess *>(Qt4xHb::getQObjectPointerFromSelfItem());

  if (obj != NULL)
  {
    QProcessSlots *s = QCoreApplication::instance()->findChild<QProcessSlots *>();

    if (s == NULL)
    {
      s = new QProcessSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt4xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
}
