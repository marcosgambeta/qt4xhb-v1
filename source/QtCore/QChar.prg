//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT4XHB_NO_REQUESTS
#endif

CLASS QChar

   DATA pointer
   DATA self_destruction INIT .F.

   METHOD new1
   METHOD new2
   METHOD new3
   METHOD new4
   METHOD new5
   METHOD new6
   METHOD new7
   METHOD new8
   METHOD new9
   METHOD new10
   METHOD new
   METHOD delete
   METHOD category
   METHOD decompositionTag
   METHOD digitValue
   METHOD direction
   METHOD hasMirrored
   METHOD isDigit
   METHOD isHighSurrogate
   METHOD isLetter
   METHOD isLetterOrNumber
   METHOD isLowSurrogate
   METHOD isLower
   METHOD isMark
   METHOD isNull
   METHOD isNumber
   METHOD isPrint
   METHOD isPunct
   METHOD isSpace
   METHOD isSymbol
   METHOD isTitleCase
   METHOD isUpper
   METHOD joining
   METHOD mirroredChar
   METHOD toCaseFolded
   METHOD toLower
   METHOD toTitleCase
   METHOD toUpper
   METHOD unicodeVersion

   METHOD newFrom
   METHOD newFromObject
   METHOD newFromPointer
   METHOD selfDestruction
   METHOD setSelfDestruction

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QChar
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/QChar>

#include "qt4xhb_common.hpp"
#include "qt4xhb_macros.hpp"
#include "qt4xhb_utils.hpp"

// QChar()
HB_FUNC_STATIC(QCHAR_NEW1)
{
  QChar *obj = new QChar();
  Qt4xHb::returnNewObject(obj, true);
}

// QChar(char ch)
HB_FUNC_STATIC(QCHAR_NEW2)
{
  QChar *obj = new QChar(PCHAR(1));
  Qt4xHb::returnNewObject(obj, true);
}

// QChar(uchar ch)
HB_FUNC_STATIC(QCHAR_NEW3)
{
  QChar *obj = new QChar(PUCHAR(1));
  Qt4xHb::returnNewObject(obj, true);
}

// QChar(QLatin1Char ch)
HB_FUNC_STATIC(QCHAR_NEW4)
{
  QChar *obj = new QChar(*PQLATIN1CHAR(1));
  Qt4xHb::returnNewObject(obj, true);
}

// QChar(uchar cell, uchar row)
HB_FUNC_STATIC(QCHAR_NEW5)
{
  QChar *obj = new QChar(PUCHAR(1), PUCHAR(2));
  Qt4xHb::returnNewObject(obj, true);
}

// QChar(ushort code)
HB_FUNC_STATIC(QCHAR_NEW6)
{
  QChar *obj = new QChar(PUSHORT(1));
  Qt4xHb::returnNewObject(obj, true);
}

// QChar(short code)
HB_FUNC_STATIC(QCHAR_NEW7)
{
  QChar *obj = new QChar(PSHORT(1));
  Qt4xHb::returnNewObject(obj, true);
}

// QChar(uint code)
HB_FUNC_STATIC(QCHAR_NEW8)
{
  QChar *obj = new QChar(PUINT(1));
  Qt4xHb::returnNewObject(obj, true);
}

// QChar(int code)
HB_FUNC_STATIC(QCHAR_NEW9)
{
  QChar *obj = new QChar(PINT(1));
  Qt4xHb::returnNewObject(obj, true);
}

// QChar(QChar::SpecialCharacter ch)
HB_FUNC_STATIC(QCHAR_NEW10)
{
  QChar *obj = new QChar((QChar::SpecialCharacter)hb_parni(1));
  Qt4xHb::returnNewObject(obj, true);
}

HB_FUNC_STATIC(QCHAR_NEW)
{
  if (ISNUMPAR(0)) {
    HB_FUNC_EXEC(QCHAR_NEW1);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QCHAR_DELETE)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

// QChar::Category category() const
HB_FUNC_STATIC(QCHAR_CATEGORY)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->category());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QChar::Decomposition decompositionTag() const
HB_FUNC_STATIC(QCHAR_DECOMPOSITIONTAG)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->decompositionTag());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// int digitValue() const
HB_FUNC_STATIC(QCHAR_DIGITVALUE)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RINT(obj->digitValue());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QChar::Direction direction() const
HB_FUNC_STATIC(QCHAR_DIRECTION)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->direction());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool hasMirrored() const
HB_FUNC_STATIC(QCHAR_HASMIRRORED)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->hasMirrored());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isDigit() const
HB_FUNC_STATIC(QCHAR_ISDIGIT)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isDigit());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isHighSurrogate() const
HB_FUNC_STATIC(QCHAR_ISHIGHSURROGATE)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isHighSurrogate());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isLetter() const
HB_FUNC_STATIC(QCHAR_ISLETTER)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isLetter());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isLetterOrNumber() const
HB_FUNC_STATIC(QCHAR_ISLETTERORNUMBER)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isLetterOrNumber());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isLowSurrogate() const
HB_FUNC_STATIC(QCHAR_ISLOWSURROGATE)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isLowSurrogate());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isLower() const
HB_FUNC_STATIC(QCHAR_ISLOWER)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isLower());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isMark() const
HB_FUNC_STATIC(QCHAR_ISMARK)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isMark());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isNull() const
HB_FUNC_STATIC(QCHAR_ISNULL)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isNull());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isNumber() const
HB_FUNC_STATIC(QCHAR_ISNUMBER)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isNumber());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isPrint() const
HB_FUNC_STATIC(QCHAR_ISPRINT)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isPrint());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isPunct() const
HB_FUNC_STATIC(QCHAR_ISPUNCT)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isPunct());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isSpace() const
HB_FUNC_STATIC(QCHAR_ISSPACE)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isSpace());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isSymbol() const
HB_FUNC_STATIC(QCHAR_ISSYMBOL)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isSymbol());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isTitleCase() const
HB_FUNC_STATIC(QCHAR_ISTITLECASE)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isTitleCase());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isUpper() const
HB_FUNC_STATIC(QCHAR_ISUPPER)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isUpper());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QChar::Joining joining() const
HB_FUNC_STATIC(QCHAR_JOINING)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->joining());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QChar mirroredChar() const
HB_FUNC_STATIC(QCHAR_MIRROREDCHAR)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QChar *ptr = new QChar(obj->mirroredChar());
      Qt4xHb::createReturnClass(ptr, "QCHAR", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QChar toCaseFolded() const
HB_FUNC_STATIC(QCHAR_TOCASEFOLDED)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QChar *ptr = new QChar(obj->toCaseFolded());
      Qt4xHb::createReturnClass(ptr, "QCHAR", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QChar toLower() const
HB_FUNC_STATIC(QCHAR_TOLOWER)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QChar *ptr = new QChar(obj->toLower());
      Qt4xHb::createReturnClass(ptr, "QCHAR", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QChar toTitleCase() const
HB_FUNC_STATIC(QCHAR_TOTITLECASE)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QChar *ptr = new QChar(obj->toTitleCase());
      Qt4xHb::createReturnClass(ptr, "QCHAR", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QChar toUpper() const
HB_FUNC_STATIC(QCHAR_TOUPPER)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QChar *ptr = new QChar(obj->toUpper());
      Qt4xHb::createReturnClass(ptr, "QCHAR", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QChar::UnicodeVersion unicodeVersion() const
HB_FUNC_STATIC(QCHAR_UNICODEVERSION)
{
  QChar *obj = static_cast<QChar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->unicodeVersion());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QCHAR_NEWFROM)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISOBJECT(1)) {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_objSendMsg(hb_param(1, HB_IT_OBJECT), "POINTER", 0)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  } else if (hb_pcount() == 1 && HB_ISPOINTER(1)) {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_param(1, HB_IT_POINTER)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

HB_FUNC_STATIC(QCHAR_NEWFROMOBJECT)
{
  HB_FUNC_EXEC(QCHAR_NEWFROM);
}

HB_FUNC_STATIC(QCHAR_NEWFROMPOINTER)
{
  HB_FUNC_EXEC(QCHAR_NEWFROM);
}

HB_FUNC_STATIC(QCHAR_SELFDESTRUCTION)
{
  hb_retl(hb_itemGetL(hb_objSendMsg(hb_stackSelfItem(), "SELF_DESTRUCTION", 0)));
}

HB_FUNC_STATIC(QCHAR_SETSELFDESTRUCTION)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISLOG(1)) {
    PHB_ITEM des = hb_itemPutL(NULL, hb_parl(1));
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

#pragma ENDDUMP
