//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT4XHB_NO_REQUESTS
REQUEST QBYTEARRAY
#endif

CLASS QCryptographicHash

   DATA pointer
   DATA self_destruction INIT .F.

   METHOD new
   METHOD delete
   METHOD addData
   METHOD reset
   METHOD result
   METHOD hash

   METHOD newFrom
   METHOD newFromObject
   METHOD newFromPointer
   METHOD selfDestruction
   METHOD setSelfDestruction

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QCryptographicHash
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/QCryptographicHash>

#include "qt4xhb_common.hpp"
#include "qt4xhb_macros.hpp"
#include "qt4xhb_utils.hpp"

    // QCryptographicHash(QCryptographicHash::Algorithm method)
HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_NEW)
{
  if (ISNUMPAR(1) && HB_ISNUM(1)) {
    QCryptographicHash *obj = new QCryptographicHash((QCryptographicHash::Algorithm)hb_parni(1));
    Qt4xHb::returnNewObject(obj, true);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_DELETE)
{
  QCryptographicHash *obj = static_cast<QCryptographicHash *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_ADDDATA)
{
  if (ISNUMPAR(2) && HB_ISCHAR(1) && HB_ISNUM(2)) {
    // void addData(const char *data, int length)
    QCryptographicHash *obj = static_cast<QCryptographicHash *>(Qt4xHb::itemGetPtrStackSelfItem());

    if (obj != NULL) {
      obj->addData(PCONSTCHAR(1), PINT(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISNUMPAR(1) && ISQBYTEARRAY(1)) {
    // void addData(const QByteArray &data)
    QCryptographicHash *obj = static_cast<QCryptographicHash *>(Qt4xHb::itemGetPtrStackSelfItem());

    if (obj != NULL) {
      obj->addData(*PQBYTEARRAY(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

// void reset()
HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_RESET)
{
  QCryptographicHash *obj = static_cast<QCryptographicHash *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      obj->reset();
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

// QByteArray result() const
HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_RESULT)
{
  QCryptographicHash *obj = static_cast<QCryptographicHash *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QByteArray *ptr = new QByteArray(obj->result());
      Qt4xHb::createReturnClass(ptr, "QBYTEARRAY", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// static QByteArray hash(const QByteArray &data, QCryptographicHash::Algorithm method)
HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_HASH)
{
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
  if (ISNUMPAR(2) && ISQBYTEARRAY(1) && HB_ISNUM(2)) {
#endif
    QByteArray *ptr =
        new QByteArray(QCryptographicHash::hash(*PQBYTEARRAY(1), (QCryptographicHash::Algorithm)hb_parni(2)));
    Qt4xHb::createReturnClass(ptr, "QBYTEARRAY", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_NEWFROM)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISOBJECT(1)) {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_objSendMsg(hb_param(1, HB_IT_OBJECT), "POINTER", 0)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else if (hb_pcount() == 1 && HB_ISPOINTER(1)) {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_param(1, HB_IT_POINTER)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_NEWFROMOBJECT)
{
  HB_FUNC_EXEC(QCRYPTOGRAPHICHASH_NEWFROM);
}

HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_NEWFROMPOINTER)
{
  HB_FUNC_EXEC(QCRYPTOGRAPHICHASH_NEWFROM);
}

HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_SELFDESTRUCTION)
{
  hb_retl(hb_itemGetL(hb_objSendMsg(hb_stackSelfItem(), "SELF_DESTRUCTION", 0)));
}

HB_FUNC_STATIC(QCRYPTOGRAPHICHASH_SETSELFDESTRUCTION)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISLOG(1)) {
    PHB_ITEM des = hb_itemPutL(NULL, hb_parl(1));
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

#pragma ENDDUMP
