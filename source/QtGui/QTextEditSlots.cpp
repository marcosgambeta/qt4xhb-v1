//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QTextEditSlots.hpp"

QTextEditSlots::QTextEditSlots(QObject *parent) : QObject(parent)
{
}

QTextEditSlots::~QTextEditSlots()
{
}

void QTextEditSlots::copyAvailable(bool yes)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "copyAvailable(bool)");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTEXTEDIT");
    PHB_ITEM pYes = hb_itemPutL(NULL, yes);

    hb_vmEvalBlockV(cb, 2, pSender, pYes);

    hb_itemRelease(pSender);
    hb_itemRelease(pYes);
  }
}

void QTextEditSlots::currentCharFormatChanged(const QTextCharFormat &f)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "currentCharFormatChanged(QTextCharFormat)");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTEXTEDIT");
    PHB_ITEM pF = Qt4xHb::Signals_return_object((void *)&f, "QTEXTCHARFORMAT");

    hb_vmEvalBlockV(cb, 2, pSender, pF);

    hb_itemRelease(pSender);
    hb_itemRelease(pF);
  }
}

void QTextEditSlots::cursorPositionChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "cursorPositionChanged()");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTEXTEDIT");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QTextEditSlots::redoAvailable(bool available)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "redoAvailable(bool)");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTEXTEDIT");
    PHB_ITEM pAvailable = hb_itemPutL(NULL, available);

    hb_vmEvalBlockV(cb, 2, pSender, pAvailable);

    hb_itemRelease(pSender);
    hb_itemRelease(pAvailable);
  }
}

void QTextEditSlots::selectionChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "selectionChanged()");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTEXTEDIT");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QTextEditSlots::textChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "textChanged()");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTEXTEDIT");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QTextEditSlots::undoAvailable(bool available)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "undoAvailable(bool)");

  if (cb != NULL) {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QTEXTEDIT");
    PHB_ITEM pAvailable = hb_itemPutL(NULL, available);

    hb_vmEvalBlockV(cb, 2, pSender, pAvailable);

    hb_itemRelease(pSender);
    hb_itemRelease(pAvailable);
  }
}

void QTextEditSlots_connect_signal(const QString &signal, const QString &slot)
{
  QTextEdit *obj = qobject_cast<QTextEdit *>(Qt4xHb::getQObjectPointerFromSelfItem());

  if (obj != NULL) {
    QTextEditSlots *s = QCoreApplication::instance()->findChild<QTextEditSlots *>();

    if (s == NULL) {
      s = new QTextEditSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt4xHb::Signals_connection_disconnection(s, signal, slot));
  } else {
    hb_retl(false);
  }
}
