//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QMovieSlots.hpp"

QMovieSlots::QMovieSlots(QObject *parent) : QObject(parent)
{
}

QMovieSlots::~QMovieSlots()
{
}

void QMovieSlots::error(QImageReader::ImageReaderError error)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "error(QImageReader::ImageReaderError)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QMOVIE");
    PHB_ITEM pError = hb_itemPutNI(NULL, static_cast<int>(error));

    hb_vmEvalBlockV(cb, 2, pSender, pError);

    hb_itemRelease(pSender);
    hb_itemRelease(pError);
  }
}

void QMovieSlots::finished()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "finished()");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QMOVIE");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QMovieSlots::frameChanged(int frameNumber)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "frameChanged(int)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QMOVIE");
    PHB_ITEM pFrameNumber = hb_itemPutNI(NULL, frameNumber);

    hb_vmEvalBlockV(cb, 2, pSender, pFrameNumber);

    hb_itemRelease(pSender);
    hb_itemRelease(pFrameNumber);
  }
}

void QMovieSlots::resized(const QSize &size)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "resized(QSize)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QMOVIE");
    PHB_ITEM pSize = Qt4xHb::Signals_return_object((void *)&size, "QSIZE");

    hb_vmEvalBlockV(cb, 2, pSender, pSize);

    hb_itemRelease(pSender);
    hb_itemRelease(pSize);
  }
}

void QMovieSlots::started()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "started()");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QMOVIE");

    hb_vmEvalBlockV(cb, 1, pSender);

    hb_itemRelease(pSender);
  }
}

void QMovieSlots::stateChanged(QMovie::MovieState state)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "stateChanged(QMovie::MovieState)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QMOVIE");
    PHB_ITEM pState = hb_itemPutNI(NULL, static_cast<int>(state));

    hb_vmEvalBlockV(cb, 2, pSender, pState);

    hb_itemRelease(pSender);
    hb_itemRelease(pState);
  }
}

void QMovieSlots::updated(const QRect &rect)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock(object, "updated(QRect)");

  if (cb != NULL)
  {
    PHB_ITEM pSender = Qt4xHb::Signals_return_qobject(object, "QMOVIE");
    PHB_ITEM pRect = Qt4xHb::Signals_return_object((void *)&rect, "QRECT");

    hb_vmEvalBlockV(cb, 2, pSender, pRect);

    hb_itemRelease(pSender);
    hb_itemRelease(pRect);
  }
}

void QMovieSlots_connect_signal(const QString &signal, const QString &slot)
{
  QMovie *obj = qobject_cast<QMovie *>(Qt4xHb::getQObjectPointerFromSelfItem());

  if (obj != NULL)
  {
    QMovieSlots *s = QCoreApplication::instance()->findChild<QMovieSlots *>();

    if (s == NULL)
    {
      s = new QMovieSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt4xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
}
