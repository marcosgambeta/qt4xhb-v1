//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT4XHB_NO_REQUESTS
REQUEST QRECT
#endif

CLASS QAccessibleWidget INHERIT QAccessibleObject

   METHOD new
   METHOD actionText
   METHOD childAt
   METHOD childCount
   METHOD doAction
   METHOD indexOfChild
   METHOD rect
   METHOD relationTo
   METHOD role
   METHOD state
   METHOD text
   METHOD userActionCount

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QAccessibleWidget
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtGui/QAccessibleWidget>

#include "qt4xhb_common.hpp"
#include "qt4xhb_macros.hpp"
#include "qt4xhb_utils.hpp"

// QAccessibleWidget(QWidget *w, QAccessible::Role role = QAccessible::Client, const QString &name = QString())
HB_FUNC_STATIC(QACCESSIBLEWIDGET_NEW)
{
  if (ISBETWEEN(1, 3) && ISQWIDGET(1) && ISNUMORNIL(2) && ISCHARORNIL(3)) {
    QAccessibleWidget *obj = new QAccessibleWidget(
        PQWIDGET(1), HB_ISNIL(2) ? (QAccessible::Role)QAccessible::Client : (QAccessible::Role)hb_parni(2),
        OPQSTRING(3, QString()));
    Qt4xHb::returnNewObject(obj, true);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

// virtual QString actionText(int action, QAccessible::Text t, int child) const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_ACTIONTEXT)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3)) {
#endif
      RQSTRING(obj->actionText(PINT(1), (QAccessible::Text)hb_parni(2), PINT(3)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual int childAt(int x, int y) const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_CHILDAT)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2)) {
#endif
      RINT(obj->childAt(PINT(1), PINT(2)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual int childCount() const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_CHILDCOUNT)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RINT(obj->childCount());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual bool doAction(int action, int child, const QVariantList &params)
HB_FUNC_STATIC(QACCESSIBLEWIDGET_DOACTION)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISARRAY(3)) {
#endif
      QVariantList par3;
      PHB_ITEM aList3 = hb_param(3, HB_IT_ARRAY);
      int nLen3 = hb_arrayLen(aList3);
      for (int i3 = 0; i3 < nLen3; i3++) {
        par3 << *static_cast<QVariant *>(
            hb_itemGetPtr(hb_objSendMsg(hb_arrayGetItemPtr(aList3, i3 + 1), "POINTER", 0)));
      }
      RBOOL(obj->doAction(PINT(1), PINT(2), par3));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual int indexOfChild(const QAccessibleInterface *child) const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_INDEXOFCHILD)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQACCESSIBLEINTERFACE(1)) {
#endif
      RINT(obj->indexOfChild(PQACCESSIBLEINTERFACE(1)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QRect rect(int child) const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_RECT)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      QRect *ptr = new QRect(obj->rect(PINT(1)));
      Qt4xHb::createReturnClass(ptr, "QRECT", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QAccessible::Relation relationTo(int child, const QAccessibleInterface *other, int otherChild) const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_RELATIONTO)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(3) && HB_ISNUM(1) && ISQACCESSIBLEINTERFACE(2) && HB_ISNUM(3)) {
#endif
      RENUM(obj->relationTo(PINT(1), PQACCESSIBLEINTERFACE(2), PINT(3)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QAccessible::Role role(int child) const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_ROLE)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      RENUM(obj->role(PINT(1)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QAccessible::State state(int child) const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_STATE)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      RENUM(obj->state(PINT(1)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QString text(QAccessible::Text t, int child) const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_TEXT)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2)) {
#endif
      RQSTRING(obj->text((QAccessible::Text)hb_parni(1), PINT(2)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual int userActionCount(int child) const
HB_FUNC_STATIC(QACCESSIBLEWIDGET_USERACTIONCOUNT)
{
  QAccessibleWidget *obj = static_cast<QAccessibleWidget *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      RINT(obj->userActionCount(PINT(1)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

#pragma ENDDUMP
