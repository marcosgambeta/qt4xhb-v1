//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT4XHB_NO_REQUESTS
#endif

CLASS QStyleOptionProgressBar INHERIT QStyleOption

   METHOD new
   METHOD minimum
   METHOD setMinimum
   METHOD maximum
   METHOD setMaximum
   METHOD progress
   METHOD setProgress
   METHOD text
   METHOD setText
   METHOD textAlignment
   METHOD setTextAlignment
   METHOD textVisible
   METHOD setTextVisible

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QStyleOptionProgressBar
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtGui/QStyleOptionProgressBar>

#include "qt4xhb_common.hpp"
#include "qt4xhb_macros.hpp"
#include "qt4xhb_utils.hpp"

HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_NEW)
{
  if (ISNUMPAR(0)) {
    // QStyleOptionProgressBar()
    QStyleOptionProgressBar *obj = new QStyleOptionProgressBar();
    Qt4xHb::returnNewObject(obj, true);
  }
  else if (ISNUMPAR(1) && ISQSTYLEOPTIONPROGRESSBAR(1))
  {
    // QStyleOptionProgressBar(const QStyleOptionProgressBar &other)
    QStyleOptionProgressBar *obj = new QStyleOptionProgressBar(*PQSTYLEOPTIONPROGRESSBAR(1));
    Qt4xHb::returnNewObject(obj, true);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

// int minimum
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_MINIMUM)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(0)) {
      RINT(obj->minimum);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }
}
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_SETMINIMUM)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
      obj->minimum = PINT(1);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_itemReturn(hb_stackSelfItem());
}

// int maximum
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_MAXIMUM)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(0)) {
      RINT(obj->maximum);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }
}
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_SETMAXIMUM)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
      obj->maximum = PINT(1);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_itemReturn(hb_stackSelfItem());
}

// int progress
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_PROGRESS)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(0)) {
      RINT(obj->progress);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }
}
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_SETPROGRESS)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
      obj->progress = PINT(1);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_itemReturn(hb_stackSelfItem());
}

// QString text
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_TEXT)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(0)) {
      RQSTRING(obj->text);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }
}
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_SETTEXT)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(1) && HB_ISCHAR(1))
    {
      obj->text = PQSTRING(1);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_itemReturn(hb_stackSelfItem());
}

// Qt::Alignment textAlignment
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_TEXTALIGNMENT)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(0)) {
      RENUM(obj->textAlignment);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }
}
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_SETTEXTALIGNMENT)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
      obj->textAlignment = (Qt::Alignment)hb_parni(1);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_itemReturn(hb_stackSelfItem());
}

// bool textVisible
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_TEXTVISIBLE)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(0)) {
      RBOOL(obj->textVisible);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }
}
HB_FUNC_STATIC(QSTYLEOPTIONPROGRESSBAR_SETTEXTVISIBLE)
{
  QStyleOptionProgressBar *obj = static_cast<QStyleOptionProgressBar *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    if (ISNUMPAR(1) && HB_ISLOG(1))
    {
      obj->textVisible = PBOOL(1);
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }

  hb_itemReturn(hb_stackSelfItem());
}

#pragma ENDDUMP
