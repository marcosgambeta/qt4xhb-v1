//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT4XHB_NO_REQUESTS
REQUEST QOBJECT
REQUEST QRECT
REQUEST QVARIANT
#endif

CLASS QAccessibleInterface INHERIT QAccessible

   METHOD delete
   METHOD actionText
   METHOD childAt
   METHOD childCount
   METHOD doAction
   METHOD indexOfChild
   METHOD invokeMethod
   METHOD isValid
   METHOD object
   METHOD rect
   METHOD relationTo
   METHOD role
   METHOD setText
   METHOD state
   METHOD text
   METHOD userActionCount

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QAccessibleInterface
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtGui/QAccessibleInterface>

#include "qt4xhb_common.hpp"
#include "qt4xhb_macros.hpp"
#include "qt4xhb_utils.hpp"

HB_FUNC_STATIC(QACCESSIBLEINTERFACE_DELETE)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

// virtual QString actionText(int action, QAccessible::Text t, int child) const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_ACTIONTEXT)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3)) {
#endif
      RQSTRING(obj->actionText(PINT(1), (QAccessible::Text)hb_parni(2), PINT(3)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual int childAt(int x, int y) const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_CHILDAT)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2)) {
#endif
      RINT(obj->childAt(PINT(1), PINT(2)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual int childCount() const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_CHILDCOUNT)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RINT(obj->childCount());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual bool doAction(int action, int child, const QVariantList &params = QVariantList()) = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_DOACTION)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(2, 3) && HB_ISNUM(1) && HB_ISNUM(2) && (HB_ISARRAY(3) || HB_ISNIL(3))) {
#endif
      QVariantList par3;
      if (HB_ISARRAY(3))
      {
        PHB_ITEM aList3 = hb_param(3, HB_IT_ARRAY);
        int nLen3 = hb_arrayLen(aList3);
        for (int i3 = 0; i3 < nLen3; i3++)
        {
          par3 << *static_cast<QVariant *>(
              hb_itemGetPtr(hb_objSendMsg(hb_arrayGetItemPtr(aList3, i3 + 1), "POINTER", 0)));
        }
      }
      RBOOL(obj->doAction(PINT(1), PINT(2), par3));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual int indexOfChild(const QAccessibleInterface *child) const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_INDEXOFCHILD)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQACCESSIBLEINTERFACE(1)) {
#endif
      RINT(obj->indexOfChild(PQACCESSIBLEINTERFACE(1)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QVariant invokeMethod(QAccessible::Method method, int child = 0, const QVariantList &params = QVariantList())
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_INVOKEMETHOD)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 3) && HB_ISNUM(1) && (HB_ISNUM(2) || HB_ISNIL(2)) && (HB_ISARRAY(3) || HB_ISNIL(3))) {
#endif
      QVariantList par3;
      if (HB_ISARRAY(3))
      {
        PHB_ITEM aList3 = hb_param(3, HB_IT_ARRAY);
        int nLen3 = hb_arrayLen(aList3);
        for (int i3 = 0; i3 < nLen3; i3++)
        {
          par3 << *static_cast<QVariant *>(
              hb_itemGetPtr(hb_objSendMsg(hb_arrayGetItemPtr(aList3, i3 + 1), "POINTER", 0)));
        }
      }
      QVariant *ptr = new QVariant(obj->invokeMethod((QAccessible::Method)hb_parni(1), OPINT(2, 0), par3));
      Qt4xHb::createReturnClass(ptr, "QVARIANT", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual bool isValid() const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_ISVALID)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isValid());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QObject *object() const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_OBJECT)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QObject *ptr = obj->object();
      Qt4xHb::createReturnQObjectClass(ptr, "QOBJECT");
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QRect rect(int child) const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_RECT)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      QRect *ptr = new QRect(obj->rect(PINT(1)));
      Qt4xHb::createReturnClass(ptr, "QRECT", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QAccessible::Relation relationTo(int child, const QAccessibleInterface *other, int otherChild) const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_RELATIONTO)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(3) && HB_ISNUM(1) && ISQACCESSIBLEINTERFACE(2) && HB_ISNUM(3)) {
#endif
      RENUM(obj->relationTo(PINT(1), PQACCESSIBLEINTERFACE(2), PINT(3)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QAccessible::Role role(int child) const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_ROLE)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      RENUM(obj->role(PINT(1)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual void setText(QAccessible::Text t, int child, const QString &text) = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_SETTEXT)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISCHAR(3)) {
#endif
      obj->setText((QAccessible::Text)hb_parni(1), PINT(2), PQSTRING(3));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

// virtual QAccessible::State state(int child) const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_STATE)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      RENUM(obj->state(PINT(1)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual QString text(QAccessible::Text t, int child) const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_TEXT)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2)) {
#endif
      RQSTRING(obj->text((QAccessible::Text)hb_parni(1), PINT(2)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// virtual int userActionCount(int child) const = 0
HB_FUNC_STATIC(QACCESSIBLEINTERFACE_USERACTIONCOUNT)
{
  QAccessibleInterface *obj = static_cast<QAccessibleInterface *>(Qt4xHb::itemGetPtrStackSelfItem());

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      RINT(obj->userActionCount(PINT(1)));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

#pragma ENDDUMP
