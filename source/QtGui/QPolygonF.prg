//
// Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT4XHB_NO_REQUESTS
REQUEST QPOLYGON
REQUEST QRECTF
#endif

CLASS QPolygonF

   DATA pointer
   DATA self_destruction INIT .F.

   METHOD new
   METHOD delete
   METHOD boundingRect
   METHOD containsPoint
   METHOD intersected
   METHOD isClosed
   METHOD subtracted
   METHOD swap
   METHOD toPolygon
   METHOD translate
   METHOD translated
   METHOD united

   METHOD newFrom
   METHOD newFromObject
   METHOD newFromPointer
   METHOD selfDestruction
   METHOD setSelfDestruction

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QPolygonF
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtGui/QPolygonF>

#include "qt4xhb_common.hpp"
#include "qt4xhb_macros.hpp"
#include "qt4xhb_utils.hpp"

#define GET_PTR_FROM_SELF(p) QPolygonF *p = static_cast<QPolygonF *>(Qt4xHb::itemGetPtrStackSelfItem())

HB_FUNC_STATIC(QPOLYGONF_NEW)
{
  if (ISNUMPAR(0)) {
    // QPolygonF()
    QPolygonF *obj = new QPolygonF();
    Qt4xHb::returnNewObject(obj, true);
  } else if (ISNUMPAR(1) && HB_ISNUM(1)) {
    // QPolygonF(int size)
    QPolygonF *obj = new QPolygonF(PINT(1));
    Qt4xHb::returnNewObject(obj, true);
  } else if (ISNUMPAR(1) && ISQPOLYGONF(1)) {
    // QPolygonF(const QPolygonF &polygon)
    QPolygonF *obj = new QPolygonF(*PQPOLYGONF(1));
    Qt4xHb::returnNewObject(obj, true);
  } else if (ISNUMPAR(1) && HB_ISARRAY(1)) {
    // QPolygonF(const QVector<QPointF> &points)
    QVector<QPointF> par1;
    PHB_ITEM aList1 = hb_param(1, HB_IT_ARRAY);
    int nLen1 = hb_arrayLen(aList1);
    for (int i1 = 0; i1 < nLen1; i1++) {
      par1 << *static_cast<QPointF *>(hb_itemGetPtr(hb_objSendMsg(hb_arrayGetItemPtr(aList1, i1 + 1), "POINTER", 0)));
    }
    QPolygonF *obj = new QPolygonF(par1);
    Qt4xHb::returnNewObject(obj, true);
  } else if (ISNUMPAR(1) && ISQRECTF(1)) {
    // QPolygonF(const QRectF &rectangle)
    QPolygonF *obj = new QPolygonF(*PQRECTF(1));
    Qt4xHb::returnNewObject(obj, true);
  } else if (ISNUMPAR(1) && ISQPOLYGON(1)) {
    // QPolygonF(const QPolygon &polygon)
    QPolygonF *obj = new QPolygonF(*PQPOLYGON(1));
    Qt4xHb::returnNewObject(obj, true);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QPOLYGONF_DELETE)
{
  GET_PTR_FROM_SELF(obj);

  if (obj != NULL) {
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

// QRectF boundingRect() const
HB_FUNC_STATIC(QPOLYGONF_BOUNDINGRECT)
{
  GET_PTR_FROM_SELF(obj);

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QRectF *ptr = new QRectF(obj->boundingRect());
      Qt4xHb::createReturnClass(ptr, "QRECTF", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool containsPoint(const QPointF &point, Qt::FillRule fillRule) const
HB_FUNC_STATIC(QPOLYGONF_CONTAINSPOINT)
{
  GET_PTR_FROM_SELF(obj);

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && ISQPOINTF(1) && HB_ISNUM(2)) {
#endif
      RBOOL(obj->containsPoint(*PQPOINTF(1), static_cast<Qt::FillRule>(hb_parni(2))));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QPolygonF intersected(const QPolygonF &r) const
HB_FUNC_STATIC(QPOLYGONF_INTERSECTED)
{
  GET_PTR_FROM_SELF(obj);

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQPOLYGONF(1)) {
#endif
      QPolygonF *ptr = new QPolygonF(obj->intersected(*PQPOLYGONF(1)));
      Qt4xHb::createReturnClass(ptr, "QPOLYGONF", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// bool isClosed() const
HB_FUNC_STATIC(QPOLYGONF_ISCLOSED)
{
  GET_PTR_FROM_SELF(obj);

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isClosed());
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// QPolygonF subtracted(const QPolygonF &r) const
HB_FUNC_STATIC(QPOLYGONF_SUBTRACTED)
{
  GET_PTR_FROM_SELF(obj);

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQPOLYGONF(1)) {
#endif
      QPolygonF *ptr = new QPolygonF(obj->subtracted(*PQPOLYGONF(1)));
      Qt4xHb::createReturnClass(ptr, "QPOLYGONF", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

// void swap(QPolygonF &other)
HB_FUNC_STATIC(QPOLYGONF_SWAP)
{
  GET_PTR_FROM_SELF(obj);

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQPOLYGONF(1)) {
#endif
      obj->swap(*PQPOLYGONF(1));
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

// QPolygon toPolygon() const
HB_FUNC_STATIC(QPOLYGONF_TOPOLYGON)
{
  GET_PTR_FROM_SELF(obj);

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QPolygon *ptr = new QPolygon(obj->toPolygon());
      Qt4xHb::createReturnClass(ptr, "QPOLYGON", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QPOLYGONF_TRANSLATE)
{
  if (ISNUMPAR(1) && ISQPOINTF(1)) {
    // void translate(const QPointF &offset)
    GET_PTR_FROM_SELF(obj);

    if (obj != NULL) {
      obj->translate(*PQPOINTF(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2)) {
    // void translate(qreal dx, qreal dy)
    GET_PTR_FROM_SELF(obj);

    if (obj != NULL) {
      obj->translate(PQREAL(1), PQREAL(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QPOLYGONF_TRANSLATED)
{
  if (ISNUMPAR(1) && ISQPOINTF(1)) {
    // QPolygonF translated(const QPointF &offset) const
    GET_PTR_FROM_SELF(obj);

    if (obj != NULL) {
      QPolygonF *ptr = new QPolygonF(obj->translated(*PQPOINTF(1)));
      Qt4xHb::createReturnClass(ptr, "QPOLYGONF", true);
    }
  } else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2)) {
    // QPolygonF translated(qreal dx, qreal dy) const
    GET_PTR_FROM_SELF(obj);

    if (obj != NULL) {
      QPolygonF *ptr = new QPolygonF(obj->translated(PQREAL(1), PQREAL(2)));
      Qt4xHb::createReturnClass(ptr, "QPOLYGONF", true);
    }
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

// QPolygonF united(const QPolygonF &r) const
HB_FUNC_STATIC(QPOLYGONF_UNITED)
{
  GET_PTR_FROM_SELF(obj);

  if (obj != NULL) {
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQPOLYGONF(1)) {
#endif
      QPolygonF *ptr = new QPolygonF(obj->united(*PQPOLYGONF(1)));
      Qt4xHb::createReturnClass(ptr, "QPOLYGONF", true);
#ifndef QT4XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QPOLYGONF_NEWFROM)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISOBJECT(1)) {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_objSendMsg(hb_param(1, HB_IT_OBJECT), "POINTER", 0)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  } else if (hb_pcount() == 1 && HB_ISPOINTER(1)) {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_param(1, HB_IT_POINTER)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

HB_FUNC_STATIC(QPOLYGONF_NEWFROMOBJECT)
{
  HB_FUNC_EXEC(QPOLYGONF_NEWFROM);
}

HB_FUNC_STATIC(QPOLYGONF_NEWFROMPOINTER)
{
  HB_FUNC_EXEC(QPOLYGONF_NEWFROM);
}

HB_FUNC_STATIC(QPOLYGONF_SELFDESTRUCTION)
{
  hb_retl(hb_itemGetL(hb_objSendMsg(hb_stackSelfItem(), "SELF_DESTRUCTION", 0)));
}

HB_FUNC_STATIC(QPOLYGONF_SETSELFDESTRUCTION)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISLOG(1)) {
    PHB_ITEM des = hb_itemPutL(NULL, hb_parl(1));
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

#pragma ENDDUMP
